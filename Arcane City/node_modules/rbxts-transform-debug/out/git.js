"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.transformGit = exports.stringArgsToSet = exports.transformCommitId = void 0;
var child_process_1 = require("child_process");
var execa_1 = __importDefault(require("execa"));
var typescript_1 = __importStar(require("typescript"));
var shared_1 = require("./shared");
var commit;
var branch;
var tag;
var dateString;
var unixTimestamp;
function transformCommitId(expression) {
    var argument = expression.arguments[0];
    if (commit === undefined) {
        try {
            commit = (0, child_process_1.execSync)("git rev-parse HEAD").toString().replace("\n", "");
        }
        catch (err) {
            throw (0, shared_1.formatTransformerDiagnostic)("Failed to grab git commit hash. Git not in PATH or project is not using git.", expression, err);
        }
    }
    if (argument && argument.kind === typescript_1.default.SyntaxKind.TrueKeyword) {
        return typescript_1.factory.createStringLiteral(commit);
    }
    else {
        return typescript_1.factory.createStringLiteral(commit.substr(0, 7));
    }
}
exports.transformCommitId = transformCommitId;
function stringArgsToSet(expressions, constraints) {
    var set = new Set();
    for (var _i = 0, expressions_1 = expressions; _i < expressions_1.length; _i++) {
        var value = expressions_1[_i];
        if (typescript_1.default.isStringLiteral(value) && (constraints === undefined || constraints.includes(value.text))) {
            set.add(value.text);
        }
    }
    return set;
}
exports.stringArgsToSet = stringArgsToSet;
var keys = ["Commit", "Branch", "CommitHash", "LatestTag", "ISODate", "Timestamp"];
function transformGit(expression) {
    var toInclude = new Set(keys);
    var args = expression.arguments;
    if (args.length > 0) {
        toInclude = stringArgsToSet(args, keys);
    }
    if (branch === undefined) {
        try {
            (branch = execa_1.default.commandSync("git rev-parse --abbrev-ref HEAD").stdout);
        }
        catch (err) {
            throw (0, shared_1.formatTransformerDiagnostic)("Failed to grab git info. Git not in PATH or project is not using git.", expression, err);
        }
    }
    if (commit === undefined) {
        try {
            (commit = execa_1.default.commandSync("git rev-parse HEAD").stdout);
        }
        catch (err) {
            throw (0, shared_1.formatTransformerDiagnostic)("Failed to grab git info. Git not in PATH or project is not using git.", expression, err);
        }
    }
    if (dateString === undefined) {
        try {
            var stdout = execa_1.default.commandSync("git show -s --format=%ct").stdout;
            dateString = new Date(parseInt(stdout) * 1000).toISOString();
            unixTimestamp = parseInt(stdout);
        }
        catch (err) {
            throw (0, shared_1.formatTransformerDiagnostic)("Failed to grab git info. Git not in PATH or project is not using git.", expression, err);
        }
    }
    if (tag === undefined) {
        try {
            (tag = execa_1.default.commandSync("git describe --abbrev=0 --tags").stdout);
        }
        catch (err) {
            tag = "";
        }
    }
    var properties = new Array();
    if (toInclude.has("Branch")) {
        properties.push(typescript_1.factory.createPropertyAssignment("Branch", typescript_1.factory.createStringLiteral(branch)));
    }
    if (toInclude.has("Commit")) {
        properties.push(typescript_1.factory.createPropertyAssignment("Commit", typescript_1.factory.createStringLiteral(commit.substr(0, 7))));
    }
    if (toInclude.has("CommitHash")) {
        properties.push(typescript_1.factory.createPropertyAssignment("CommitHash", typescript_1.factory.createStringLiteral(commit)));
    }
    if (toInclude.has("LatestTag")) {
        properties.push(typescript_1.factory.createPropertyAssignment("LatestTag", typescript_1.factory.createStringLiteral(tag)));
    }
    if (toInclude.has("ISODate")) {
        properties.push(typescript_1.factory.createPropertyAssignment("ISODate", typescript_1.factory.createStringLiteral(dateString !== null && dateString !== void 0 ? dateString : new Date().toISOString())));
    }
    if (toInclude.has("Timestamp")) {
        properties.push(typescript_1.factory.createPropertyAssignment("Timestamp", typescript_1.factory.createNumericLiteral(unixTimestamp !== null && unixTimestamp !== void 0 ? unixTimestamp : 0)));
    }
    return typescript_1.factory.createAsExpression(typescript_1.factory.createObjectLiteralExpression(properties), typescript_1.factory.createTypeReferenceNode("$git"));
}
exports.transformGit = transformGit;
